import React, { useState, useRef } from "react";
import axios from "axios";
import { Button, Typography, Container, CircularProgress, Select, MenuItem, FormControl, InputLabel } from "@mui/material"; 
import Grid from '@mui/material/Grid2';

function UploadLottie() {
  const [file, setFile] = useState(null);
  const [videoUrl, setVideoUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [showVideo, setShowVideo] = useState(false);
  const [fps, setFps] = useState("auto");
  const [isFpsDisabled, setIsFpsDisabled] = useState(false);
  const [inputKey, setInputKey] = useState(Date.now());
  const fileInputRef = useRef(null);
  const videoCheckTimer = useRef(null); // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä

  const handleFileChange = async (event) => {
    const selectedFile = event.target.files[0];
    if (!selectedFile) return;
  
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–µ–æ
    if (videoCheckTimer.current) {
      clearTimeout(videoCheckTimer.current);
    }
  
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try {
      await axios.post("http://localhost:5001/cancel");
      console.log("‚õî –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
    }
  
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setFile(selectedFile);
    setVideoUrl("");
    setShowVideo(false);
    setLoading(false);
    setIsFpsDisabled(false);
    setIsVideoReady(false); // ‚ùó –¢–µ–ø–µ—Ä—å —Å–µ–ª–µ–∫—Ç–æ—Ä –∏ –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ
    setInputKey(Date.now()); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º input
  };

  const handleUpload = async () => {
    if (!file) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ Lottie JSON —Ñ–∞–π–ª!");
      return;
    }

    const formData = new FormData();
    formData.append("lottie", file);
    formData.append("fps", fps === "auto" ? "auto" : fps);

    setLoading(true);
    setIsFpsDisabled(true);

    try {
      const response = await axios.post("http://localhost:5001/convert", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });

      console.log('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª:', response.data);
      const videoFileName = response.data.videoFileName;
      waitForVideo(videoFileName);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");
      setLoading(false);
      setIsFpsDisabled(false);
    }
  };

  const [isVideoReady, setIsVideoReady] = useState(false); // üî• –ù–æ–≤—ã–π —Å—Ç–µ–π—Ç

  const waitForVideo = async (videoFileName, attempts = 0, delay = 2000) => {
    if (!file) {
      console.log("üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.");
      return;
    }
  
    const maxAttempts = 50;
    const videoPath = `http://localhost:5001/output/${videoFileName}?nocache=${Date.now()}`;
  
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ (–ø–æ–ø—ã—Ç–∫–∞ #${attempts + 1}/${maxAttempts})`);
  
    try {
      const response = await axios.head(videoPath);
      if (response.status === 200) {
        console.log("‚úÖ –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ:", videoPath);
        setVideoUrl(videoPath);
        setLoading(true); // üî• –°–ø–∏–Ω–Ω–µ—Ä –∫—Ä—É—Ç–∏—Ç—Å—è –µ—â—ë 1 —Å–µ–∫—É–Ω–¥—É
        setIsFpsDisabled(true);
        setIsVideoReady(true);
  
        setTimeout(() => {
          console.log("üé¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É.");
          setShowVideo(true);
          setLoading(false); // ‚ùó –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
  
          // ‚è≥ –¢–∞–π–º–µ—Ä 3 –º–∏–Ω—É—Ç—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
          setTimeout(() => {
            console.log("‚è≥ –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã.");
            setShowVideo(false);
          }, 5 * 60 * 1000);
          
        }, 2000);
  
        return;
      }
    } catch (error) {
      console.error(`‚ùå –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ—Ç (–ø–æ–ø—ã—Ç–∫–∞ #${attempts + 1}/${maxAttempts})`);
    }
  
    if (attempts >= maxAttempts) {
      console.error("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫!");
      setLoading(false);
      setIsFpsDisabled(false);
      alert("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.");
      return;
    }
  
    if (attempts >= 5) delay = 4000;
    if (attempts >= 10) delay = 6000;
  
    videoCheckTimer.current = setTimeout(() => waitForVideo(videoFileName, attempts + 1, delay), delay);
  };

  const downloadVideo = async () => {
    if (!videoUrl) {
      alert("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
      return;
    }

    console.log("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ:", videoUrl);
    const response = await fetch(videoUrl);
    const blob = await response.blob();
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "converted-video.mp4";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <Container maxWidth="sm" style={{ textAlign: "center", padding: "20px" }}>
      <Typography variant="h4" gutterBottom>
        –ó–∞–≥—Ä—É–∑–∏—Ç—å Lottie —Ñ–∞–π–ª
      </Typography>

      <Grid container justifyContent="center" spacing={2}>
        <Grid item xs={12}>
          <input
            key={inputKey}
            type="file"
            accept=".json"
            onChange={handleFileChange}
            ref={fileInputRef}
            style={{ display: "none" }}
          />
          <Button
            variant="contained"
            component="label"
            color="secondary"
            onClick={() => fileInputRef.current.click()}
          >
            –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
          </Button>
        </Grid>
        
        {file && (
          <Grid item xs={12}>
            <Typography variant="body1">–§–∞–π–ª: {file.name}</Typography>
          </Grid>
        )}

        {file && !loading && !isVideoReady && (
          <Grid item xs={12}>
            <FormControl fullWidth>
              <InputLabel>–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ (FPS)</InputLabel>
              <Select
                value={fps}
                onChange={(e) => setFps(e.target.value)}
                label="–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ (FPS)"
                disabled={isFpsDisabled}
              >
                <MenuItem value="auto">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–∑ —Ñ–∞–π–ª–∞)</MenuItem>
                <MenuItem value={1}>1 FPS</MenuItem>
                <MenuItem value={24}>24 FPS</MenuItem>
                <MenuItem value={30}>30 FPS</MenuItem>
                <MenuItem value={60}>60 FPS</MenuItem>
              </Select>
            </FormControl>
          </Grid>
        )}

        {file && !loading && !isVideoReady && (
          <Grid item xs={12}>
            <Button variant="contained" color="primary" onClick={handleUpload}>
              –ó–∞–≥—Ä—É–∑–∏—Ç—å
            </Button>
          </Grid>
        )}
      </Grid>

      {loading && (
        <div style={{ marginTop: "20px" }}>
          <CircularProgress size={50} color="primary" />
        </div>
      )}

      {showVideo && videoUrl && (
        <div>
          <Typography variant="h5" gutterBottom>
            –ì–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ:
          </Typography>
          <video key={videoUrl} controls width="400" style={{ display: "block", margin: "0 auto" }}>
            <source src={videoUrl} type="video/mp4" />
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
          </video>
          <br />
          <Button
            variant="outlined"
            color="secondary"
            onClick={downloadVideo}
            style={{ display: "block", margin: "20px auto" }}
          >
            –°–∫–∞—á–∞—Ç—å
          </Button>
        </div>
      )}
    </Container>
  );
}

export default UploadLottie;