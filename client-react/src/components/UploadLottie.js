import React, { useState, useRef, useEffect } from "react";
import axios from "axios";
import UploadLottieLayout from "./UploadLottieLayout";
import lottieWeb from 'lottie-web';

function UploadLottie() {
  const [file, setFile] = useState(null);
  const [videoUrl, setVideoUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [showVideo, setShowVideo] = useState(false);
  const [fps, setFps] = useState("auto");
  const [isFpsDisabled, setIsFpsDisabled] = useState(false);
  const [inputKey, setInputKey] = useState(Date.now());
  const [progress, setProgress] = useState(0);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState("success");
  const [lottieFps, setLottieFps] = useState(null);
  const [lottieDuration, setLottieDuration] = useState(null);
  const [videoFps, setVideoFps] = useState(null);
  const [videoSize, setVideoSize] = useState(null); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ
  const [videoRenderFps, setVideoRenderFps] = useState(null);
  const fileInputRef = useRef(null);
  const videoCheckTimer = useRef(null);
  const lottieContainerRef = useRef(null);
  const [isVideoReady, setIsVideoReady] = useState(false);

  useEffect(() => {
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        const lottieData = JSON.parse(event.target.result);
        setLottieFps(lottieData.fr);
        setLottieDuration(lottieData.op / lottieData.fr);
        lottieWeb.loadAnimation({
          container: lottieContainerRef.current,
          renderer: 'svg',
          loop: true,
          autoplay: true,
          animationData: lottieData,
        });
      };
      reader.readAsText(file);
    }
  }, [file]);

  const handleFileChange = async (event) => {
    const selectedFile = event.target.files[0];
    if (!selectedFile) return;
  
    if (videoCheckTimer.current) {
      clearTimeout(videoCheckTimer.current);
    }
  
    try {
      await axios.post("http://localhost:5001/cancel");
      console.log("‚õî –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
    }
  
    setFile(selectedFile);
    setVideoUrl("");
    setShowVideo(false);
    setLoading(false);
    setIsFpsDisabled(false);
    setIsVideoReady(false);
    setInputKey(Date.now());
    setLottieFps(null); // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    setLottieDuration(null); // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
  };

  const handleUpload = async () => {
    if (!file) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ Lottie JSON —Ñ–∞–π–ª!");
      return;
    }

    const formData = new FormData();
    formData.append("lottie", file);
    formData.append("fps", fps === "auto" ? "auto" : fps);
    setVideoRenderFps(fps === "auto" ? lottieFps : fps); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FPS —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

    setLoading(true);
    setIsFpsDisabled(true);

    try {
      const response = await axios.post("http://localhost:5001/convert", formData, {
        headers: { "Content-Type": "multipart/form-data" },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setProgress(percentCompleted);
        }
      });

      console.log('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª:', response.data);
      const videoFileName = response.data.videoFileName;
      waitForVideo(videoFileName);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
      setSnackbarMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      setLoading(false);
      setIsFpsDisabled(false);
    }
  };

  const waitForVideo = async (videoFileName, attempts = 0, delay = 2000) => {
    if (!file) {
      console.log("üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.");
      return;
    }
  
    const maxAttempts = 50;
    const videoPath = `http://localhost:5001/output/${videoFileName}?nocache=${Date.now()}`;
  
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ (–ø–æ–ø—ã—Ç–∫–∞ #${attempts + 1}/${maxAttempts})`);
  
    try {
      const response = await axios.head(videoPath);
      if (response.status === 200) {
        console.log("‚úÖ –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ:", videoPath);
        setVideoUrl(videoPath);
        setLoading(true);
        setIsFpsDisabled(true);
        setIsVideoReady(true);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
        const videoResponse = await fetch(videoPath);
        const videoBlob = await videoResponse.blob();
        const videoSizeInMB = videoBlob.size / (1024 * 1024);
        const videoSizeFormatted = videoSizeInMB < 1 ? `${(videoBlob.size / 1024).toFixed(2)} –ö–ë` : `${videoSizeInMB.toFixed(2)} –ú–ë`;
        setVideoSize(videoSizeFormatted);

        setTimeout(() => {
          console.log("üé¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É.");
          setShowVideo(true);
          setLoading(false);
          setLottieFps(null); // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
          setLottieDuration(null); // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
  
          setTimeout(() => {
            console.log("‚è≥ –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã.");
            setShowVideo(false);
          }, 3 * 60 * 1000);
          
        }, 2000);
  
        return;
      }
    } catch (error) {
      console.error(`‚ùå –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ—Ç (–ø–æ–ø—ã—Ç–∫–∞ #${attempts + 1}/${maxAttempts})`);
    }
  
    if (attempts >= maxAttempts) {
      console.error("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫!");
      setLoading(false);
      setIsFpsDisabled(false);
      setSnackbarMessage("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      return;
    }
  
    if (attempts >= 5) delay = 4000;
    if (attempts >= 10) delay = 6000;
  
    videoCheckTimer.current = setTimeout(() => waitForVideo(videoFileName, attempts + 1, delay), delay);
  };

  const downloadVideo = async () => {
    if (!videoUrl) {
      alert("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
      return;
    }

    console.log("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ:", videoUrl);
    const response = await fetch(videoUrl);
    const blob = await response.blob();
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "converted-video.mp4";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  const layoutProps = {
    file,
    inputKey,
    fileInputRef,
    handleFileChange,
    fps,
    setFps,
    isFpsDisabled,
    handleUpload,
    loading,
    lottieContainerRef,
    showVideo,
    videoUrl,
    downloadVideo,
    snackbarOpen,
    handleSnackbarClose,
    snackbarMessage,
    snackbarSeverity,
    isVideoReady,
    lottieFps,
    lottieDuration,
    videoFps,
    videoSize, // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
    videoRenderFps, // –ü–µ—Ä–µ–¥–∞–µ–º FPS —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  };

  return <UploadLottieLayout {...layoutProps} />;
}

export default UploadLottie;